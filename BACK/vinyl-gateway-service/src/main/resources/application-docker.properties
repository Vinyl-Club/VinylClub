# Application name
spring.application.name=vinyl-gateway-service

# Server port
server.port=8090

# Configuration CORS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=http://localhost:8084,http://127.0.0.1:8084
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true
spring.cloud.gateway.globalcors.cors-configurations.[/**].max-age=3600



# Eureka Client configuration
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
# Use the service name in Docker instead of localhost
eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
# Custom instance ID
eureka.instance.instanceId=${spring.application.name}:${server.port}
# Prefer IP address over hostname in Docker
eureka.instance.prefer-ip-address=true

# Gateway routes configuration


# Route to the catalog service
spring.cloud.gateway.routes[0].id=vinyl-catalog-service
spring.cloud.gateway.routes[0].uri=lb://vinyl-catalog-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/artists/**,/api/products/**,/api/albums/**,/api/categories/**,/api/images/**

# Route to the user service
# In application-docker.properties of the gateway
spring.cloud.gateway.routes[1].id=vinyl-user-service
spring.cloud.gateway.routes[1].uri=lb://vinyl-user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/users/**,/api/addresses/**

# Route to the authentication service
spring.cloud.gateway.routes[2].id=vinyl-auth-service
spring.cloud.gateway.routes[2].uri=lb://vinyl-auth-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/auth/**
# spring.cloud.gateway.routes[2].filters[0]=StripPrefix=1

# Enable automatic route discovery
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Timeout configuration
spring.cloud.gateway.httpclient.connect-timeout=2000
spring.cloud.gateway.httpclient.response-timeout=5000

# Actuator configuration for monitoring
management.endpoints.web.exposure.include=health,info,gateway
management.endpoint.gateway.enabled=true
management.endpoint.health.show-details=always

# Logging
logging.level.org.springframework.cloud.gateway=INFO
logging.level.reactor.netty=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Docker-friendly log output configuration
logging.file.name=/var/log/spring-boot/gateway.log

# Error handling configurations
spring.cloud.gateway.default-filters[0]=DedupeResponseHeader=Access-Control-Allow-Origin
spring.cloud.gateway.default-filters[1]=DedupeResponseHeader=Access-Control-Allow-Credentials

# # CORS Configuration
# spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
# spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=*
# spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*