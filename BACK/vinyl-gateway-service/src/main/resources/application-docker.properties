# Nom de l'application
spring.application.name=vinyl-gateway-service

# Port du serveur
server.port=8090

# Configuration Eureka Client
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
# Utiliser le nom du service dans Docker plutôt que localhost
eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
# Identifiant d'instance personnalisé
eureka.instance.instanceId=${spring.application.name}:${server.port}
# Préférer l'IP plutôt que le hostname dans Docker
eureka.instance.prefer-ip-address=true

# Configuration des routes Gateway
# Route vers le service catalogue
spring.cloud.gateway.routes[0].id=vinyl-catalog-service
spring.cloud.gateway.routes[0].uri=lb://vinyl-catalog-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/catalog/**

# Route vers le service utilisateur
# Dans application-docker.properties de la gateway
spring.cloud.gateway.routes[1].id=user-service
spring.cloud.gateway.routes[1].uri=lb://vinyl-user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/users/**

# Activation de la découverte automatique des routes
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Configuration des timeouts
spring.cloud.gateway.httpclient.connect-timeout=2000
spring.cloud.gateway.httpclient.response-timeout=5000

# Configuration Actuator pour le monitoring
management.endpoints.web.exposure.include=health,info,gateway
management.endpoint.gateway.enabled=true
management.endpoint.health.show-details=always

# Logging
logging.level.org.springframework.cloud.gateway=INFO
logging.level.reactor.netty=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Configuration de la sortie des journaux Docker-friendly
logging.file.name=/var/log/spring-boot/gateway.log

# Configurations de gestion des erreurs
spring.cloud.gateway.default-filters[0]=DedupeResponseHeader=Access-Control-Allow-Origin
spring.cloud.gateway.default-filters[1]=DedupeResponseHeader=Access-Control-Allow-Credentials

# CORS Configuration
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*